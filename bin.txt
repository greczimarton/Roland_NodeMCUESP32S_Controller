
    // Serial.println("Set Metronome SW Toggle to 0");
    // nimble.SendMidiMessageByRequest(RolandMessageRequest(RolandAddressNames::METRONOME_SW_TOGGLE, 0));

    // Serial.println("Change app mode");
    // RolandMessageRequest rmq = RolandMessageRequest(RolandAddressNames::APPLICATION_MODE, 1);
    // midiMessage = nimble.BuildMidiMessageFromMessageRequest(rmq);
    // nimble.SendMidiMessage(midiMessage);
    // nimble.ReadMidiMessage();
    // delay(1000);

    // Serial.println("Connect command");
    // rmq = RolandMessageRequest(RolandAddressNames::CONNECTION, 1);
    // midiMessage = nimble.BuildMidiMessageFromMessageRequest(rmq);
    // nimble.SendMidiMessage(midiMessage);
    // nimble.ReadMidiMessage();
    // delay(1000);

    // Serial.println("Set Metronome SW Toggle to 0");
    // rmq = RolandMessageRequest(RolandAddressNames::METRONOME_SW_TOGGLE, 0);
    // midiMessage = nimble.BuildMidiMessageFromMessageRequest(rmq);
    // nimble.SendMidiMessage(midiMessage);
    // nimble.ReadMidiMessage();
    // delay(1000);

    // NimBLEDevice::init("");
    // NimBLEDevice::setSecurityAuth(BLE_SM_PAIR_AUTHREQ_SC);
    // /** Optional: set the transmit power, default is 3db */
    // NimBLEDevice::setPower(ESP_PWR_LVL_P9); /** +9db */

    // if (connectToServer())
    // {
    //     Serial.println("Success! we are connected!");
    // }
    // else
    // {
    //     Serial.println("Failed to connect");
    // }
    // delay(150);

    // SubscribeToNotifications();

    // delay(1000);

    // nimble.ReadMidiMessage();
    // Serial.println("Change app mode");
    // // getHeaderAndTimestamp(&header, &timestamp);
    // //  uint8_t midiMessage[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x12, 0x01, 0x00, 0x03, 0x00, 0x00, 0x01, 0x7B, 0xF7}; // change app mode to 0,1
    // //  uint8_t *msg1 = midiMessage;
    // //  sendmidiMessage(msg1, sizeof(midiMessage));
    // RolandMessageRequest rmq(RolandAddressNames::APPLICATION_MODE, 1);
    // std::vector<uint8_t> builtMidiCommand = nimble.BuildMidiMessageFromMessageRequest(rmq);
    // nimble.SendMidiMessage(builtMidiCommand);
    // nimble.ReadMidiMessage();

    // delay(1000);

    // Serial.println("Connect command");
    // // getHeaderAndTimestamp(&header, &timestamp);
    // //  uint8_t midiMessage2[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x12, 0x01, 0x00, 0x03, 0x06, 0x01, 0x75, 0xF7}; // connect command
    // //   // uint8_t midiMessage2[] = { header, tmestamp, 0x80, 0x46, 0x50 }; //Use this for note off
    // //   uint8_t *msg2 = midiMessage2;
    // //   sendmidiMessage(msg2, sizeof(midiMessage2));
    // RolandMessageRequest rmq1(RolandAddressNames::CONNECTION, 1);
    // std::vector<uint8_t> builtMidiCommand1 = nimble.BuildMidiMessageFromMessageRequest(rmq1);
    // nimble.SendMidiMessage(builtMidiCommand1);
    // nimble.ReadMidiMessage();

    // delay(1000);

    // Serial.println("Set Metronome SW Toggle to 0");
    // // getHeaderAndTimestamp(&header, &timestamp);
    // //  uint8_t midiMessage9[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x12, 0x01, 0x00, 0x05, 0x09, 0x00, 0x71, 0xF7};
    // //  uint8_t *msg9 = midiMessage9;
    // //  sendmidiMessage(msg9, sizeof(midiMessage9));
    // RolandMessageRequest rmq2(RolandAddressNames::METRONOME_SW_TOGGLE, 0);
    // std::vector<uint8_t> builtMidiCommand2 = nimble.BuildMidiMessageFromMessageRequest(rmq2);
    // nimble.SendMidiMessage(builtMidiCommand2);
    // nimble.ReadMidiMessage();

    // delay(1000);

    // delay(1000);

    // readmidiMessage();
    // Serial.println("Change app mode");
    // getHeaderAndTimestamp(&header, &timestamp);
    // // uint8_t midiMessage[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x12, 0x01, 0x00, 0x03, 0x00, 0x00, 0x01, 0x7B, 0xF7}; // change app mode to 0,1
    // // uint8_t *msg1 = midiMessage;
    // // sendmidiMessage(msg1, sizeof(midiMessage));
    // RolandMessageRequest rmq(RolandAddressNames::APPLICATION_MODE, 1);
    // std::vector<uint8_t> builtMidiMessage = {header, timestamp};
    // std::vector<uint8_t> builtMidiCommand = rmq.BuildMidiMessage();
    // builtMidiMessage.insert(builtMidiMessage.end(), builtMidiCommand.begin(), builtMidiCommand.end());
    // sendmidiMessage((const uint8_t *)builtMidiMessage.data(), builtMidiMessage.size());
    // readmidiMessage();

// #define SERVICE_UUID "03b80e5a-ede8-4b33-a751-6ce34ec4c700"
// #define CHARACTERISTIC_UUID "7772e5db-3868-4112-a1a9-f2669d106bf3"

// static NimBLEClient *pClient;
// static NimBLERemoteService *pSvc;
// static NimBLERemoteCharacteristic *pChr;

// static uint8_t header;
// static uint8_t timestamp;

// static uint8_t midibuff[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// static long ibuff = 0;
// static boolean isbuffer = false;

// void sysexid()
// {
//     String addr = "";
//     addr = (midibuff[10] < 16 ? "0" : "");
//     addr = addr + String(midibuff[10], HEX);
//     addr = addr + (midibuff[11] < 16 ? "0" : "");
//     addr = addr + String(midibuff[11], HEX);
//     addr = addr + (midibuff[12] < 16 ? "0" : "");
//     addr = addr + String(midibuff[12], HEX);
//     addr = addr + (midibuff[13] < 16 ? "0" : "");
//     addr = addr + String(midibuff[13], HEX);
//     addr.toUpperCase();

//     if (addr.equals("0100010F"))
//     {
//         // metronome status
//         Serial.print("Metronome is ");
//         if (midibuff[14] == 1)
//         {
//             Serial.println("on");
//         }
//         else
//         {
//             Serial.println("off");
//         }
//     }
//     else if (addr.equals("01000108"))
//     {
//         // metronome sequencerTempoRO
//         Serial.print("Metronome beat is: ");
//         Serial.println(midibuff[14] * 128 + midibuff[15]);
//     }
//     else if (addr.equals("01000213"))
//     {
//         // masterVolume
//         Serial.print("Mater volume is: ");
//         Serial.println(midibuff[14]);
//     }
// }

// void buffntfy(String ntfy)
// {
//     String tmp;
//     ntfy.toUpperCase();
//     //  Serial.print("BUFFER: ");
//     //  Serial.println(ntfy);
//     for (int i = 0; i < ntfy.length(); i = i + 2)
//     {
//         tmp = ntfy.substring(i, i + 2);
//         midibuff[ibuff] = (int)strtol(tmp.c_str(), NULL, 16);
//         //    Serial.print("String: ");
//         //    Serial.print(tmp);
//         //    Serial.print(" gives atoi: ");
//         //    Serial.print(midibuff[ibuff] < 16 ? "0" : "");
//         //    Serial.println(midibuff[ibuff]);
//         ibuff++;
//         if (i < 2 && ibuff > 1)
//         {
//             ibuff--;
//         }
//         if (tmp.equals("F0"))
//         {
//             isbuffer = true;
//         }
//         else if (tmp.equals("F7"))
//         {
//             isbuffer = false;
//             sysexid();
//         }
//     }

//     if (!isbuffer)
//     {
//         Serial.print("Notification value: ");
//         for (int i = 0; i < ibuff; i++)
//         {
//             Serial.print(midibuff[i] < 16 ? "0" : "");
//             Serial.print(midibuff[i], HEX);
//             midibuff[i] = 0x00;
//         }
//         Serial.println("");
//         ibuff = 0;
//     }
// }

// /** Notification / Indication receiving handler callback */
// void notifyCB(NimBLERemoteCharacteristic *pRemoteCharacteristic, uint8_t *pData, size_t length, bool isNotify)
// {
//     std::string str = (isNotify == true) ? "Notification" : "Indication";
//     str += " from ";
//     str += std::string(pRemoteCharacteristic->getRemoteService()->getClient()->getPeerAddress());
//     str += ": Service = " + std::string(pRemoteCharacteristic->getRemoteService()->getUUID());
//     str += ", Characteristic = " + std::string(pRemoteCharacteristic->getUUID());
//     str += ", Value = ";
//     Serial.print(str.c_str());

//     uint8_t *hexpl;
//     char *rply = NimBLEUtils::buildHexData(hexpl, pData, length);
//     // Serial.print("Value notify: ");
//     Serial.println(String(rply));
// }

// void SubscribeToNotifications()
// {
//     Serial.println("Subscribing to notifcations.");
//     if (pChr->canNotify())
//     {
//         if (!pChr->subscribe(true, notifyCB))
//         {
//             /** Disconnect if subscribe failed */
//             Serial.println("SUBSCRIPTION FAILED. DISCONNECTING...");
//             pClient->disconnect();
//         }
//     }
// }

// /** Handles the provisioning of clients and connects / interfaces with the server */
// bool connectToServer()
// {
//     // NimBLEClient* pClient = nullptr;

//     pClient = NimBLEDevice::createClient(NimBLEAddress("db:1e:e5:c5:c6:58", 1));
//     NimBLEDevice::setMTU(128);
//     Serial.println("Checking connection...");
//     if (!pClient->isConnected())
//     {
//         bool isconnected = false;
//         while (!isconnected)
//         {
//             pClient->connect();
//             delay(100);
//             if (pClient->isConnected())
//             {
//                 isconnected = true;
//             }
//             else
//             {
//                 Serial.println("Trying to connect... waiting 5 seconds...");
//             }
//         }
//         Serial.println("Connected");
//         Serial.println(pClient->getPeerAddress().toString().c_str());
//         Serial.print("RSSI: ");
//         Serial.println(pClient->getRssi());

//         pSvc = pClient->getService(SERVICE_UUID);
//         if (pSvc)
//         { /** make sure it's not null */
//             pChr = pSvc->getCharacteristic(CHARACTERISTIC_UUID);
//         }

//         return true;
//     }
//     else
//     {
//         Serial.println("Already connected");
//         return true;
//     }
// }

// void sendmidiMessage(const uint8_t *data, size_t length)
// {
//     /** Now we can read/write/subscribe the charateristics of the services we are interested in */

//     Serial.print("Length to write is: ");
//     Serial.println(length);

//     Serial.print("Data to write is: ");
//     for (int i = 0; i < length; i++)
//     {
//         Serial.print(data[i] < 16 ? "0" : "");
//         Serial.print(data[i], HEX);
//     }
//     Serial.println();

//     if (pChr)
//     { /** make sure it's not null */
//         if (pChr->writeValue(data, length))
//         {
//             Serial.print("Wrote new value to: ");
//             Serial.println(pChr->getUUID().toString().c_str());
//         }
//     }

//     delay(100);
// }

// void readmidiMessage()
// {
//     std::string rply = pChr->readValue();
//     Serial.print("Reply Read: ");
//     for (int i = 0; i < rply.length(); i++)
//     {
//         Serial.print(rply[i] < 16 ? "0" : "");
//         Serial.print(rply[i], HEX);
//     }
//     Serial.println();
// }

// void getHeaderAndTimestamp(uint8_t *header, uint8_t *tmestamp)
// {
//     auto currentTimeStamp = millis() & 0x01FFF;

//     *header = ((currentTimeStamp >> 7) & 0x3F) | 0x80; // 6 bits plus MSB
//     *tmestamp = (currentTimeStamp & 0x7F) | 0x80;      // 7 bits plus MSB
// }


    // delay(1000);

    // Serial.println("Connect command");
    // getHeaderAndTimestamp(&header, &timestamp);
    // // uint8_t midiMessage2[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x12, 0x01, 0x00, 0x03, 0x06, 0x01, 0x75, 0xF7}; // connect command
    // //  // uint8_t midiMessage2[] = { header, tmestamp, 0x80, 0x46, 0x50 }; //Use this for note off
    // //  uint8_t *msg2 = midiMessage2;
    // //  sendmidiMessage(msg2, sizeof(midiMessage2));
    // RolandMessageRequest rmq1(RolandAddressNames::CONNECTION, 1);
    // std::vector<uint8_t> builtMidiMessage1 = {header, timestamp};
    // std::vector<uint8_t> builtMidiCommand1 = rmq1.BuildMidiMessage();
    // builtMidiMessage1.insert(builtMidiMessage1.end(), builtMidiCommand1.begin(), builtMidiCommand1.end());
    // sendmidiMessage((const uint8_t *)builtMidiMessage1.data(), builtMidiMessage1.size());
    // readmidiMessage();

    // delay(1000);

    // Serial.println("Set Metronome SW Toggle to 0");
    // getHeaderAndTimestamp(&header, &timestamp);
    // // uint8_t midiMessage9[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x12, 0x01, 0x00, 0x05, 0x09, 0x00, 0x71, 0xF7};
    // // uint8_t *msg9 = midiMessage9;
    // // sendmidiMessage(msg9, sizeof(midiMessage9));
    // RolandMessageRequest rmq2(RolandAddressNames::METRONOME_SW_TOGGLE, 0);
    // std::vector<uint8_t> builtMidiMessage2 = {header, timestamp};
    // std::vector<uint8_t> builtMidiCommand2 = rmq2.BuildMidiMessage();
    // builtMidiMessage2.insert(builtMidiMessage2.end(), builtMidiCommand2.begin(), builtMidiCommand2.end());
    // sendmidiMessage((const uint8_t *)builtMidiMessage2.data(), builtMidiMessage2.size());
    // readmidiMessage();

    // delay(1000);


// Serial.println("Get sequencer TempoRO");
// getHeaderAndTimestamp(&header, &timestamp);
// uint8_t midiMessage3[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x11, 0x01, 0x00, 0x01, 0x08, 0x00, 0x00, 0x02, 0x74, 0xF7}; // get sequencer TempoRO
// uint8_t *msg3 = midiMessage3;
// sendmidiMessage(msg3, sizeof(midiMessage3));
// readmidiMessage();

// delay(1000);

// readmidiMessage();
// Serial.println("Change app mode");
// getHeaderAndTimestamp(&header, &timestamp);
// uint8_t midiMessage4[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x12, 0x01, 0x00, 0x03, 0x00, 0x00, 0x01, 0x7B, 0xF7}; // change app mode to 0,1
// uint8_t *msg4 = midiMessage4;
// sendmidiMessage(msg4, sizeof(midiMessage4));
// readmidiMessage();

// Serial.println("Connect command");
// getHeaderAndTimestamp(&header, &timestamp);
// uint8_t midiMessage5[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x12, 0x01, 0x00, 0x03, 0x06, 0x01, 0x75, 0xF7}; // connect command
// uint8_t *msg5 = midiMessage5;
// sendmidiMessage(msg5, sizeof(midiMessage5));
// readmidiMessage();

// Serial.println("Get sequencer TempoRO");
// getHeaderAndTimestamp(&header, &timestamp);
// uint8_t midiMessage6[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x11, 0x01, 0x00, 0x01, 0x08, 0x00, 0x02, 0x74, 0xF7}; // get sequencer TempoRO
// uint8_t *msg6 = midiMessage6;
// sendmidiMessage(msg6, sizeof(midiMessage6));
// readmidiMessage();

// Serial.println("Set sequencer TempoWO to 60");
// getHeaderAndTimestamp(&header, &timestamp);
// uint8_t midiMessage7[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x12, 0x01, 0x00, 0x03, 0x09, 0x00, 0x3C, 0x37, 0xF7};
// uint8_t *msg7 = midiMessage7;
// sendmidiMessage(msg7, sizeof(midiMessage7));
// readmidiMessage();

// delay(1000);

// Serial.println("Set Master volume to 40");
// getHeaderAndTimestamp(&header, &timestamp);
// uint8_t midiMessage8[] = {header, timestamp, 0xF0, 0x41, 0x10, 0x00, 0x00, 0x00, 0x28, 0x12, 0x01, 0x00, 0x02, 0x13, 0x28, 0x42, 0xF7};
// uint8_t *msg8 = midiMessage8;
// sendmidiMessage(msg8, sizeof(midiMessage8));
// readmidiMessage();